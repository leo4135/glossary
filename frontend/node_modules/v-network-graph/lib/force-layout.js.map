{"version":3,"file":"force-layout.js","sources":["../src/layouts/force.ts"],"sourcesContent":["import { Ref, toRef, watch } from \"vue\"\nimport * as d3 from \"d3-force\"\nimport { Edges, NodePositions, Nodes } from \"@/common/types\"\nimport { OnClickHandler, OnDragHandler } from \"@/common/types\"\nimport { LayoutActivateParameters, LayoutHandler } from \"./handler\"\n\nexport interface ForceNodeDatum extends d3.SimulationNodeDatum {\n  id: string\n}\n\nexport interface ForceEdgeDatum {\n  source: string\n  target: string\n}\n\ntype d3Type = typeof d3\n\ntype CreateSimulationFunction = (\n  d3: d3Type,\n  nodes: ForceNodeDatum[],\n  edges: ForceEdgeDatum[]\n) => d3.Simulation<ForceNodeDatum, ForceEdgeDatum>\n\nexport type ForceLayoutParameters = {\n  positionFixedByDrag?: boolean\n  positionFixedByClickWithAltKey?: boolean\n  noAutoRestartSimulation?: boolean\n  createSimulation?: CreateSimulationFunction\n}\n\nexport class ForceLayout implements LayoutHandler {\n  private onDeactivate?: () => void\n  private onTick?: () => void\n\n  constructor(private options: ForceLayoutParameters = {}) {}\n\n  activate(parameters: LayoutActivateParameters): void {\n    const { nodePositions, nodes, edges, emitter } = parameters\n    let { nodeLayouts, nodeLayoutMap } = this.buildNodeLayouts(nodes.value, nodePositions)\n\n    const simulation = this.createSimulation(\n      nodeLayouts,\n      this.forceLayoutEdges(edges.value, nodes.value)\n    )\n\n    this.onTick = () => {\n      for (const node of nodeLayouts) {\n        const layout = nodePositions.value?.[node.id]\n        if (layout) {\n          const x = node.x ?? 0\n          const y = node.y ?? 0\n          if (layout.x !== x || layout.y !== y) {\n            Object.assign(layout, { x, y })\n          }\n        } else {\n          nodePositions.value[node.id] = {\n            x: node.x ?? 0,\n            y: node.y ?? 0,\n          }\n        }\n      }\n    }\n    simulation.on(\"tick\", this.onTick)\n\n    // for ticked manually\n    this.onTick()\n\n    const restartSimulation = () => {\n      if (!this.options.noAutoRestartSimulation) {\n        simulation.alpha(0.1).restart()\n      }\n    }\n\n    const onDrag: OnDragHandler = positions => {\n      if (this.options.noAutoRestartSimulation) {\n        for (const [id, pos] of Object.entries(positions)) {\n          const nodePos = nodePositions.value?.[id]\n          nodePos.x = pos.x\n          nodePos.y = pos.y\n        }\n      } else {\n        for (const [id, pos] of Object.entries(positions)) {\n          const nodePos = nodeLayoutMap[id]\n          nodePos.fx = pos.x\n          nodePos.fy = pos.y\n        }\n        restartSimulation()\n      }\n    }\n\n    const onDragEnd: OnDragHandler = positions => {\n      for (const [id, pos] of Object.entries(positions)) {\n        const layout = this.getNodeLayout(nodePositions, id)\n        const nodePos: d3.SimulationNodeDatum = nodeLayoutMap?.[id] ?? { x: 0, y: 0 }\n        if (layout.value.fixed || this.options.positionFixedByDrag) {\n          nodePos.fx = pos.x\n          nodePos.fy = pos.y\n          layout.value.fixed = true\n        } else {\n          nodePos.x = pos.x\n          nodePos.y = pos.y\n          delete nodePos.fx\n          delete nodePos.fy\n        }\n      }\n      restartSimulation()\n    }\n\n    const onClick: OnClickHandler = ({ node, event }) => {\n      if (this.options.positionFixedByClickWithAltKey && event.altKey) {\n        const layout = this.getNodeLayout(nodePositions, node)\n        let nodePos: ForceNodeDatum | undefined = nodeLayoutMap?.[node]\n        if (!nodePos) {\n          nodePos = { id: node, x: 0, y: 0 }\n          nodeLayoutMap[node] = nodePos\n        }\n\n        if (layout.value.fixed) {\n          // unfix\n          delete layout.value.fixed\n          nodePos.x = nodePos.fx || nodePos.x\n          nodePos.y = nodePos.fy || nodePos.y\n          delete nodePos.fx\n          delete nodePos.fy\n        } else {\n          // fix\n          layout.value.fixed = true\n          nodePos.fx = nodePos.x\n          nodePos.fy = nodePos.y\n        }\n        restartSimulation()\n      }\n    }\n\n    const stopNetworkWatch = watch(\n      () => [\n        Object.keys(nodes.value),\n        Object.keys(nodePositions.value),\n        // Watch only for changes in links, not all properties of the edge objects.\n        Object.values(edges.value).map(e => `${e.source}=${e.target}`),\n        // Watch only for changes in `fixed`, not all properties of the node position object.\n        Object.values(nodePositions.value).map(p => p.fixed),\n      ],\n      () => {\n        ({ nodeLayouts, nodeLayoutMap } = this.buildNodeLayouts(nodes.value, nodePositions))\n        simulation.nodes(nodeLayouts)\n        const forceEdges = simulation.force<d3.ForceLink<ForceNodeDatum, ForceEdgeDatum>>(\"edge\")\n        if (forceEdges) {\n          forceEdges.links(this.forceLayoutEdges(edges.value, nodes.value))\n        }\n        restartSimulation()\n      }\n    )\n\n    emitter.on(\"node:dragstart\", onDrag)\n    emitter.on(\"node:pointermove\", onDrag)\n    emitter.on(\"node:dragend\", onDragEnd)\n    emitter.on(\"node:click\", onClick)\n\n    this.onDeactivate = () => {\n      simulation.stop()\n      stopNetworkWatch()\n      emitter.off(\"node:dragstart\", onDrag)\n      emitter.off(\"node:pointermove\", onDrag)\n      emitter.off(\"node:dragend\", onDragEnd)\n      emitter.off(\"node:click\", onClick)\n    }\n  }\n\n  deactivate(): void {\n    if (this.onDeactivate) {\n      this.onDeactivate()\n    }\n    this.onTick = undefined\n  }\n\n  ticked(): void {\n    this.onTick?.()\n  }\n\n  private createSimulation(\n    nodes: ForceNodeDatum[],\n    edges: ForceEdgeDatum[]\n  ): d3.Simulation<ForceNodeDatum, ForceEdgeDatum> {\n    if (this.options.createSimulation) {\n      return this.options.createSimulation(d3, nodes, edges)\n    } else {\n      const forceLink = d3.forceLink<ForceNodeDatum, ForceEdgeDatum>(edges).id(d => d.id)\n      return d3\n        .forceSimulation(nodes)\n        .force(\"edge\", forceLink.distance(100))\n        .force(\"charge\", d3.forceManyBody())\n        .force(\"collide\", d3.forceCollide(50).strength(0.2))\n        .force(\"center\", d3.forceCenter().strength(0.05))\n        .alphaMin(0.001)\n    }\n  }\n\n  private buildNodeLayouts(nodes: Readonly<Nodes>, nodePositions: Ref<NodePositions>) {\n    const newNodes = Object.keys(nodes).filter(n => !(n in nodePositions.value))\n    const nodeLayouts = this.forceNodeLayouts(nodePositions.value, newNodes)\n    const nodeLayoutMap = Object.fromEntries(nodeLayouts.map(n => [n.id, n]))\n    return { nodeLayouts, nodeLayoutMap }\n  }\n\n  private forceNodeLayouts(layouts: NodePositions, newNodes: string[]): ForceNodeDatum[] {\n    const data: ForceNodeDatum[] = Object.entries(layouts).map(([id, v]) => {\n      return v.fixed ? { id, ...v, fx: v.x, fy: v.y } : { id, ...v }\n    })\n    newNodes.map(id => ({ id })).forEach(n => data.push(n))\n    return data\n  }\n\n  private forceLayoutEdges(edges: Edges, nodes: Nodes): ForceEdgeDatum[] {\n    // d3-force replaces the source/target in the edge with NodeDatum\n    // objects, so build own link objects.\n    return Object.values(edges)\n      .filter(edge => edge.source in nodes && edge.target in nodes)\n      .map(v => ({\n        source: v.source,\n        target: v.target,\n      }))\n  }\n\n  private getNodeLayout(nodePositions: Ref<NodePositions>, node: string) {\n    const layout = toRef(nodePositions.value, node)\n    if (!layout.value) {\n      layout.value = { x: 0, y: 0 }\n    }\n    return layout\n  }\n}\n"],"names":["ForceLayout","options","parameters","nodePositions","nodes","edges","emitter","nodeLayouts","nodeLayoutMap","simulation","node","layout","_a","x","_b","y","_c","_d","_e","restartSimulation","onDrag","positions","id","pos","nodePos","onDragEnd","onClick","event","stopNetworkWatch","watch","e","p","forceEdges","d3","forceLink","d","newNodes","n","layouts","data","v","__spreadProps","__spreadValues","edge","toRef"],"mappings":"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"}