import { Position } from '../../common/types';
import { NodeState } from '../../models/node';
import { NodeLabelStyle, ShapeStyle } from '../../common/configs';
import { DefineComponent, ComponentOptionsMixin, PublicProps, ComponentProvideOptions } from 'vue';
interface Props {
    id: string;
    state: NodeState;
    pos?: Position;
}
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        'override-node-label'?(_: {
            class: {
                draggable: boolean;
                selectable: number | boolean;
            };
            nodeId: string;
            scale: number;
            text: string;
            x: number;
            y: number;
            config: NodeLabelStyle;
            shape: ShapeStyle;
            textAnchor: string;
            dominantBaseline: string;
        }): any;
    };
    refs: {};
    rootEl: SVGGElement;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: DefineComponent<Props, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<Props> & Readonly<{}>, {
    pos: Position;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, SVGGElement>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
